keyword     =  { "as" | "let" | "fn" | "if" | "else" | ty | bool_lit }
    ty      =  { unit_ty | bool_ty | u_ty | i_ty | f_ty | gen_ty }
    unit_ty =  { "()" }
    bool_ty =  { "bool" }
    u_ty    =  { /* "u8" | "u16" | "u32" | */ "u64" /* | "usize" */ }
    i_ty    =  { /* "i8" | "i16" | "i32" | */ "i64" /* | "isize" */ }
    f_ty    =  { /* "f32" | */ "f64" }
    bool_lit=  { "true" | "false" }
    gen_ty  =  { "?" }

lit         = _{ float | int | bool }
    int     = @{ (add | sub)? ~ ASCII_DIGIT+ }
    float   = @{ int ~ "." ~ ASCII_DIGIT+ }
    bool    =  { "true" | "false" }

ident       = @{ !keyword ~ !"_" ~ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }

binary_op   = _{ add | sub | mul | div | eq | ne | gt | ge | lt | le | or | and }
    add     =  { "+" }
    sub     =  { "-" }
    mul     =  { "*" }
    div     =  { "/" }
    eq      =  { "==" }
    ne      =  { "!=" }
    gt      =  { ">" }
    ge      =  { ">=" }
    lt      =  { "<" }
    le      =  { "<=" }
    or      =  { "||" }
    and     =  { "&&" }

type_decl   =  _{ ":" ~ ty }

unary_op    = _{ plus | neg | not }
    plus    =  { "+" }
    neg     =  { "-" }
    not     =  { "!" }

term        =  { /* convert | */ lit | "(" ~ expr ~ ")" | branch | call | access }
    access  =  { ident }
    branch  =  { "if" ~ expr ~ scope ~ "else" ~ scope }
    // convert =  { term ~ "as" ~ ident }
    call    =  { ident ~ "(" ~ args ~ ")" }
        args= _{ (arg ~ ("," ~ arg)*)? }
        arg =  { expr }

expr        =  { _term ~ (binary_op ~ _term)* }
    _term   = _{ unary | term }
    unary   =  { unary_op ~ expr }

statement   =  { assign | expr }
    assign  =  { "let" ~ ident ~ type_decl? ~"=" ~ expr }

scope       =  { "{" ~ statement ~ (";" ~ statement)* ~ ";"? ~ "}" }

function    =  { "fn" ~ ident ~ "(" ~ params ~ ")" ~ fn_ty ~ scope }
    params  = _{ (param ~ ("," ~ param)*)? }
    param   =  { ident ~ type_decl? }
    fn_ty   =  { ("->" ~ ty)? }

module      =  { (function | statement ~ ";")* ~ statement?}

input       = _{ SOI ~ module ~ EOI }



WHITESPACE  = _{ " " | "\t" | newline }
    newline = _{ "\n" | "\r\n" }
COMMENT     = _{ block | inline }
    block   = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
    inline  = _{ "//" ~ (!newline ~ ANY)* ~ newline }

/* int         =  { (add | sub)? ~ ASCII_DIGIT+ }
float       = @{ int ~ "." ~ ASCII_DIGIT+ }
lit         = _{ float | int }
ident       = @{ !keyword ~ ASCII_ALPHA ~ ASCII_ALPHANUMERIC* }
factor      =  {
    lit | (add | sub) ~ factor | "(" ~ expr ~ ")" | call |
    d_scope | access | branch
} */

/* access      =  { ident }
args        =  { (expr ~ ("," ~ expr)*)? }
call        =  { ident ~ "(" ~ args ~ ")" } */



// arith
/* term  =  { factor ~ ((mul | div) ~ factor)* }
expr  =  { term ~ ((add | sub) ~ term)* } */

// logic_expr  =  {  }

// control flow
/* branch      =  { "if" ~ expr ~ d_scope ~ "else" ~ d_scope }
assign      =  { "let" ~ ident ~ "=" ~ expr }
no_return   =  { assign }
statement   =  { no_return | expr } */

// structure
//scope       =  { statement ~ (";" ~ statement)* }
//d_scope     = _{ "{" ~ scope ~ "}" }
//params      =  { ident* }
//function    =  { "fn" ~ ident ~ "(" ~ params ~ ")" ~ d_scope }
//module      =  { function* }

// file
/* input       = _{ SOI ~ module ~ EOI } */

// other
//WHITESPACE  = _{ " " | "\t" | "\n" | "\r\n" }
//COMMENT     = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" } */
